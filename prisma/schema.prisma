generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  email            String     @unique
  name             String
  likeSongs        Song[]     @relation(name: "LikedSongs")
  uploadSongs      Song[]     @relation(name: "UploadedSongs")
  likeAlbums       Album[]    @relation(name: "LikedAlbums")
  uploadAlbums     Album[]    @relation(name: "UploadedAlbums")
  playlist         Playlist[]
  favouritesArtist Artist[]
}

model Song {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  url           String
  duration      Int?
  rating        Int?
  thumbnail     String
  reproductions Int?
  isPublic      Boolean?
  userCreatorId String   @db.ObjectId
  UserCreator   User     @relation(name: "UploadedSongs", fields: [userCreatorId], references: [id])
  likedById     String[] @db.ObjectId
  UserLike      User?    @relation(name: "LikedSongs", fields: [likedById], references: [id])
  Album         Album?   @relation(fields: [albumId], references: [id])
  albumId       String?  @db.ObjectId
  Genre         Genre    @relation(fields: [genreId], references: [id])
  genreId       String   @db.ObjectId
  playlist      String[] @db.ObjectId
artistId   String   @db.ObjectId
 Artist     Artist   @relation(fields: [artistId], references: [id]) // Each song is related to one artist
}

model Album {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  thumbnail     String
  totalTracks   Int?
  Song          Song[]
  isPublic      Boolean?
  userCreatorId String  @db.ObjectId
  UserCreator   User    @relation(name: "UploadedAlbums", fields: [userCreatorId], references: [id])
  likedById     String[] @db.ObjectId
  UserLike      User?    @relation(name: "LikedAlbums", fields: [likedById], references: [id])
  Genre         Genre    @relation(fields: [genreId], references: [id])
  genreId       String   @db.ObjectId
  Artist        Artist?  @relation(fields: [artistId], references: [id])
  artistId      String?  @db.ObjectId
}

model Genre {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  thumbnail String?
  updatedAt DateTime? @updatedAt
  name      String
  Song      Song[]
  Album     Album[]
}

model Playlist {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  playlistName  String   @unique
  thumbnail     String?
  playlistSongs String[] @db.ObjectId
  userCreatorId String   @db.ObjectId
  UserCreator   User?    @relation(fields: [userCreatorId], references: [id])
}

model Artist {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  thumbnail  String?
  Song       Song[]  
  Album      Album[]
  followedBy User?    @relation(fields: [likedBy], references: [id])
  likedBy    String?  @db.ObjectId
}
